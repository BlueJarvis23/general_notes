
syntax on
set ruler
set shiftwidth=4
set tabstop=4
set expandtab
set hlsearch
set splitbelow
set splitright
colorscheme elflord

setlocal spelllang=en_us
set shell=/bin/bash
set shellcmdflag=-c

if &diff == 'nodiff'
    set shellcmdflag=-ic
endif

command Json %!python -m json.tool

set nocompatible
syntax enable
filetype plugin on

" FILE BROWSING:
" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**
" Display all matching files when we tab complete
set wildmenu
" Tweaks for browsing
let g:netrw_banner=0 " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
"let g:netrw_list_hide=netrw_gitignore#Hide()
"let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'
" NOW WE CAN:
" - :edit a folder to open a file browser
" - <CR>/v/t to open in an h-split/vsplit/tab
" - chek |netrw-browse-maps| for more mappings

" TAG JUMPING:
" Creat the `tags` file (may need to install ctags first)
command! MakeTags !ctags -R .
" NOW WE CAN:
" - Use ^] to jump to a tag under cursor
" - Use g^] for abmiguous tags
" - Use ^t to jump back up the tag stack
" THINGS TO CONSIDER:
" - This doesn't help if you want a visual list of tags

" AUTOCOMPLETE:
" The good stuff is documented in |ins-completion|
" HIGHLIGHTS:
" - ^x^n for just this file
" - ^x^f for filenames (works with out path trick!)
" - ^x^] for tags only
" - ^n for anything specified by the 'complete' option
" NOW WE CAN:
" - Use ^n and ^p to go back and forth in the suggestion list

" SNIPPETS:
" Read an emplty HTML template and move the cursor to the title
"nnoremap ,html : -1read $HOME/.vim/.skeleton.html<CR>3jwf>a
nnoremap ,bash : -1read $HOME/.vim/.templates/template.bash<CR>
" NOW WE CAN:
" - take over the world! (with much fewer keystrokes)

" LOOK UP ABREVIATIONS:
" - vim pays attention to what you do in 'insert' mode and then run a command

" BUILD INTEGRATION:
" Steal Mr. Bradley's formatter & add it to our spec_helper
" Congigure the `make` command to run RSpec
"set makeprg=bundle\ exec\ rspec\ -f\ QuickfixFormatter
" NOW WE CAN:
" - Run :make to run RSpec
" - :cl to list errors
" - :cc# to jump to error by number
" - :cn and :cp to navigate forward and back

" PLUGINS WORTH LOOKING INTO:
" - vundle
